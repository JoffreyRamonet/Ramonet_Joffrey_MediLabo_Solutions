version: '3.8'

services:

  keycloak-mysql:
    container_name: keycloak-mysql
    restart: on-failure
    healthcheck:
      test: mysqladmin ping -h localhost -u root -p$MYSQL_ROOT_PASSWORD
      timeout: 20s
      retries: 5
    image: mysql:8.0
    volumes:
      - ./keycloak_mysql_data:/var/lib/mysql-keycloak
    environment:
      MYSQL_DATABASE: keycloak
      MYSQL_ROOT_PASSWORD: rootroot
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    expose:
      - 8181
    ports:
      - "8181:8181"

  keycloak:
    container_name: keycloak
    restart: on-failure
    healthcheck:
      test: bash -c ':> /dev/tcp/localhost/8080'
      interval: 3s
      timeout: 10s
      retries: 3
    depends_on:
      keycloak-mysql:
        condition: service_healthy
    image: quay.io/keycloak/keycloak:24.0.4
    command: ["start-dev"]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_URL_HOST: keycloak-mysql
      DB_URL_DATABASE: keycloak
      DB_PASSWORD: password
      DB_USERNAME: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
#
#      KEYCLOAK_FRONTEND_URL: https://localhost:8080/auth/
#
    expose:
      - 8080
    ports:
      - "8080:8080"


  configuration-server:
    container_name: configuration-server
    healthcheck:
      test: exit 0
    build:
      context: configuration_server
      dockerfile: Dockerfile
    restart: always
    expose:
      - 9101
    ports:
      - "9101:9101"

  microservice-back-mysql:
    container_name: microservice-back-mysql
    image: mysql:8.0
    volumes:
      - ./mysql_data:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping -h localhost -u root -p$MYSQL_ROOT_PASSWORD
      timeout: 20s
      retries: 5
    restart: always
    expose:
      - 9090
    ports:
      - "9090:9090"
    environment:
      MYSQL_DATABASE: medilabo_solutions
      MYSQL_ROOT_PASSWORD: rootroot
      MYSQL_TCP_PORT: 9090


# ***** NOT WORKING YET *****
  microservice-back-mongodb:
    container_name: microservice-back-mongodb
    image: mongo:latest
    volumes:
#      - mongodb-data:/data/db
      - ./db/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
#    healthcheck:
#      test: echo 'db.runCommand("ping").ok' | mongosh localhost:9191/test --quiet
#      timeout: 20s
#      retries: 5
    restart: always
    command:
      - '--auth'
    expose:
      - 27017
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootroot
      MONGODB_DATABASE: notes
      MONGODB_HOST_NAME: localhost
      MONGODB_PORT: 27017

  eureka-server:
    container_name: eureka-server
    healthcheck:
       test: curl --fail http://eureka:password@localhost:9102 || exit 1
       interval: 10s
       timeout: 10s
       retries: 3
    depends_on:
      configuration-server:
        condition: service_healthy
    build:
      context: eureka_server
      dockerfile: Dockerfile
    restart: always
    expose:
      - 9102
    ports:
      - "9102:9102"
    environment:
      spring.cloud.config.uri: http://configuration-server:9101
      eureka.instance.hostname: eureka-server
      eureka.client.serviceUrl.defaultZone: http://eureka:password@localhost:9102/eureka

  microservice-gateway:
    container_name: microservice-gateway
    healthcheck:
      test: netstat -ltn | grep -c 9000 || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      configuration-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    build:
      context: microservice_gateway
      dockerfile: Dockerfile
    restart: always
    expose:
      - 9000
    ports:
      - "9000:9000"
    environment:
      spring.cloud.config.uri: http://configuration-server:9101
      eureka.client.serviceUrl.defaultZone: http://eureka:password@eureka-server:9102/eureka
#      spring.security.oauth2.resourceserver.jwt.issuer-uri: http://keycloak:8080/realms/Medilabo-Solutions-realm
      spring.security.oauth2.resourceserver.jwt.issuer-uri: http://keycloak:8080/realms/Medilabo-Solutions-realm
      keycloak.auth.server-url: http://keycloak:8080/auth
      keycloak.credentials.secret: a8Wy5weCZmerTicC215DWnLm7QOu0rTN


  microservice-backend_patient:
    container_name: microservice-backend_patient
    healthcheck:
      test: curl --fail http://localhost:9001/microservice-backend_patient/v1/patient/all || exit 1
      interval: 20s
      timeout: 30s
      retries: 3
    depends_on:
      configuration-server:
        condition: service_healthy
      microservice-back-mysql:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    build:
      context: microservice_backend_patient
      dockerfile: Dockerfile
    restart: always
    expose:
      - 9001
    ports:
      - "9001:9001"
    environment:
      spring.cloud.config.uri: http://configuration-server:9101
      eureka.client.serviceUrl.defaultZone: http://eureka:password@eureka-server:9102/eureka
      spring.datasource.url: jdbc:mysql://microservice-back-mysql:9090/medilabo_solutions?useUnicode=true&characterEncoding=utf8&createDatabaseIfNotExist=true&serverTimezone=UTC
      spring.datasource.username: root
      spring.datasource.password: rootroot
      spring.datasource.root.password: rootroot
      spring.jpa.database-platform: org.hibernate.dialect.MySQLDialect

#  microservice-backend-note:
#    container_name: microservice-backend-note
#    healthcheck:
#      test: curl --fail http://localhost:9003/microservice-backend-note/v1/note/all || exite 1
#      interval: 20s
#      timeout: 30s
#      retries: 3
##    depends_on:
##      - microservice-back-mongodb:
##          condition: service_healthy
#    build:
#      context: microservice_backend_note
#      dockerfile: Dockerfile
#    restart: always
#    expose:
#      - 9003
#    ports:
#      - "9003:9003"
#    environment:
##      spring.data.mongodb.host: microservice-back-mongodb
#      spring.cloud.config.uri: http://configuration-server:9101
#      eureka.client.serviceUrl.defaultZone: http://eureka:password@eureka-server:9102/eureka

  microservice-front:
    container_name: microservice-front
    healthcheck:
      test: curl --fail http://localhost:4200 || exit 1
      interval: 20s
      timeout: 30s
      retries: 3
    depends_on:
      keycloak:
        condition: service_healthy
    build:
      context: microservice_front
      dockerfile: Dockerfile
    restart: always
    expose:
      - 4200
    ports:
      - "4200:4200"