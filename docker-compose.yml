version: '3.8'

services:

  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:8.0
    restart: on-failure
    healthcheck:
      test: mysqladmin ping -h localhost -u root -p$MYSQL_ROOT_PASSWORD
      start_period: 5s
      timeout: 10s
      retries: 5
    volumes:
      - ./volume_docker/keycloak_mysql_data:/var/lib/mysql-keycloak
    environment:
      MYSQL_DATABASE: keycloak
      MYSQL_ROOT_PASSWORD: rootroot
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    expose:
      - 3306
    ports:
      - "3306:3306"

  microservice-back-mysql:
    container_name: microservice-back-mysql
    image: mysql:8.0
    restart: on-failure
    volumes:
      - ./volume_docker/backend_mysql_data:/var/lib/mysql_data
    healthcheck:
      test: mysqladmin ping -h localhost -u root -p$MYSQL_ROOT_PASSWORD
      start_period: 5s
      timeout: 10s
      retries: 5
    expose:
      - 3307
    ports:
      - "3307:3307"
    environment:
      MYSQL_DATABASE: medilabo_solutions
      MYSQL_ROOT_PASSWORD: rootroot
      MYSQL_TCP_PORT: 3307


  microservice-back-mongodb:
    container_name: microservice-back-mongodb
    image: mongo:latest
    restart: on-failure
    volumes:
      - ./volume_docker/backend_mongodb_data:/var/lib/mongodb_data
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      start_period: 5s
      timeout: 10s
      retries: 5
    command:
      - '--auth'
    expose:
      - 27017
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootroot
      MONGODB_DATABASE: notes
      MONGODB_HOST_NAME: localhost
      MONGODB_PORT: 27017

  configuration-server:
    container_name: configuration-server
    restart: on-failure
    healthcheck:
      test: "curl --fail --silent localhost:9101/actuator/health | grep UP || exit 1"
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 5
    build:
      context: microservice_configuration_server
      dockerfile: Dockerfile
    expose:
      - 9101
    ports:
      - "9101:9101"

  eureka-server:
    container_name: eureka-server
    restart: on-failure
    healthcheck:
      test: curl --fail http://eureka:password@localhost:9102 || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      configuration-server:
        condition: service_healthy
    build:
      context: microservice_eureka_server
      dockerfile: Dockerfile
    expose:
      - 9102
    ports:
      - "9102:9102"
    environment:
      spring.cloud.config.uri: http://configuration-server:9101
      eureka.instance.hostname: eureka-server
      eureka.client.serviceUrl.defaultZone: http://eureka:password@localhost:9102/eureka

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.4
    command: [ "start-dev", "--import-realm" ]
    restart: on-failure
    volumes:
      - ./keycloak/imports/realm.json:/opt/keycloak/data/import/realm.json
    healthcheck:
      test: bash -c ':> /dev/tcp/localhost/8080'
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 3
    depends_on:
      keycloak-mysql:
        condition: service_healthy
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_URL_HOST: keycloak-mysql
      DB_URL_DATABASE: keycloak
      DB_PASSWORD: password
      DB_USERNAME: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    expose:
      - 8080
    ports:
      - "8080:8080"
    network_mode: host

  microservice-gateway:
    container_name: microservice-gateway
    restart: on-failure
    healthcheck:
      test: netstat -ltn | grep -c 9000 || exit 1
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 3
    depends_on:
      configuration-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    build:
      context: microservice_gateway
      dockerfile: Dockerfile
    expose:
      - 9000
    ports:
      - "9000:9000"
    network_mode: host
    environment:
#      spring.cloud.config.uri: http://configuration-server:9101
#      eureka.client.serviceUrl.defaultZone: http://eureka:password@eureka-server:9102/eureka
      spring.cloud.config.uri: http://localhost:9101
      eureka.client.serviceUrl.defaultZone: http://eureka:password@localhost:9102/eureka
      spring.security.oauth2.resourceserver.jwt.issuer-uri: http://localhost:8080/realms/Medilabo-Solutions-realm
      keycloak.auth.server-url: http://localhost:8080/auth
      keycloak.credentials.secret: a8Wy5weCZmerTicC215DWnLm7QOu0rTN

  microservice-backend_patient:
    container_name: microservice-backend_patient
    restart: on-failure
    healthcheck:
      test: curl --fail http://localhost:9001/microservice_backend_patient/v1/patient/all || exit 1
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 3
    depends_on:
      configuration-server:
        condition: service_healthy
      microservice-back-mysql:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    build:
      context: microservice_backend_patient
      dockerfile: Dockerfile
    expose:
      - 9001
    ports:
      - "9001:9001"
    environment:
      spring.cloud.config.uri: http://configuration-server:9101
      eureka.client.serviceUrl.defaultZone: http://eureka:password@eureka-server:9102/eureka
      spring.datasource.url: jdbc:mysql://microservice-back-mysql:3307/medilabo_solutions?useUnicode=true&characterEncoding=utf8&createDatabaseIfNotExist=true&serverTimezone=UTC
      spring.datasource.username: root
      spring.datasource.password: rootroot
      spring.datasource.root.password: rootroot
      spring.jpa.database-platform: org.hibernate.dialect.MySQLDialect

  microservice-backend-note:
    container_name: microservice-backend-note
    restart: on-failure
    healthcheck:
      test: curl --fail http://localhost:9003/microservice_backend_note/v1/note/all || exit 1
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 3
    depends_on:
      microservice-back-mongodb:
        condition: service_healthy
    build:
      context: microservice_backend_note
      dockerfile: Dockerfile
    expose:
      - 9003
    ports:
      - "9003:9003"
    environment:
      spring.data.mongodb.host: microservice-back-mongodb
      spring.data.mongodb.port: 27017
      spring.data.mongodb.authentication-database: admin
      spring.data.mongodb.username: root
      spring.data.mongodb.password: rootroot
      spring.cloud.config.uri: http://configuration-server:9101
      eureka.client.serviceUrl.defaultZone: http://eureka:password@eureka-server:9102/eureka

  microservice-backend-assessor:
    container_name: microservice-backend-assessor
    restart: on-failure
    healthcheck:
      test: curl --fail http://localhost:9004/microservice_backend_assessor/v1/trigger/all || exit 1
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 3
    depends_on:
      microservice-back-mysql:
        condition: service_healthy
    build:
      context: microservice_backend_assessor
      dockerfile: Dockerfile
    expose:
      - 9004
    ports:
      - "9004:9004"
    environment:
      spring.cloud.config.uri: http://configuration-server:9101
      eureka.client.serviceUrl.defaultZone: http://eureka:password@eureka-server:9102/eureka
      spring.datasource.url: jdbc:mysql://microservice-back-mysql:3307/medilabo_solutions?useUnicode=true&characterEncoding=utf8&createDatabaseIfNotExist=true&serverTimezone=UTC
      spring.datasource.username: root
      spring.datasource.password: rootroot
      spring.datasource.root.password: rootroot
      spring.jpa.database-platform: org.hibernate.dialect.MySQLDialect

  microservice-front:
    container_name: microservice-front
    restart: on-failure
    healthcheck:
      test: curl --fail http://localhost:4200 || exit 1
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 3
    depends_on:
      keycloak:
        condition: service_healthy
    build:
      context: microservice_front
      dockerfile: Dockerfile
    expose:
      - 4200
    ports:
      - "4200:4200"
